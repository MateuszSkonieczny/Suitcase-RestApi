// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SuitcaseApi.Models;

namespace SuitcaseApi.Migrations
{
    [DbContext(typeof(SuitcaseContext))]
    [Migration("20220415193306_AddedSuitcaseTables")]
    partial class AddedSuitcaseTables
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.16")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SuitcaseApi.Models.City", b =>
                {
                    b.Property<int>("IdCity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdCountry")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("IdCity")
                        .HasName("City_pk");

                    b.HasIndex("IdCountry");

                    b.ToTable("City");
                });

            modelBuilder.Entity("SuitcaseApi.Models.Country", b =>
                {
                    b.Property<int>("IdCountry")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("IdCountry")
                        .HasName("Country_pk");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("SuitcaseApi.Models.Item", b =>
                {
                    b.Property<int>("IdItem")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsPacked")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("IdItem")
                        .HasName("Item_pk");

                    b.ToTable("Item");
                });

            modelBuilder.Entity("SuitcaseApi.Models.Suitcase", b =>
                {
                    b.Property<int>("IdSuitcase")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdCity")
                        .HasColumnType("int");

                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("IdSuitcase")
                        .HasName("Suitcase_pk");

                    b.HasIndex("IdCity");

                    b.HasIndex("IdUser");

                    b.ToTable("Suitcase");
                });

            modelBuilder.Entity("SuitcaseApi.Models.SuitcaseItem", b =>
                {
                    b.Property<int>("IdSuitcase")
                        .HasColumnType("int");

                    b.Property<int>("IdItem")
                        .HasColumnType("int");

                    b.HasKey("IdSuitcase", "IdItem")
                        .HasName("SuitcaseItem_pk");

                    b.HasIndex("IdItem");

                    b.ToTable("Suitcase_Item");
                });

            modelBuilder.Entity("SuitcaseApi.Models.User", b =>
                {
                    b.Property<int>("IdUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid?>("RefreshToken")
                        .HasMaxLength(255)
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("TokenExpire")
                        .HasColumnType("datetime2");

                    b.HasKey("IdUser")
                        .HasName("User_Id");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            IdUser = 1,
                            Email = "a@gmail.com",
                            HashedPassword = "AQAAAAEAACcQAAAAEDJk1ku5Q8iQTFoC0dQFUCQ8W8YQklfB4DKyDLb/25cFsmGQiFcBd+9E6w6OpViCRA==",
                            Login = "Adam"
                        });
                });

            modelBuilder.Entity("SuitcaseApi.Models.City", b =>
                {
                    b.HasOne("SuitcaseApi.Models.Country", "IdCountryNavigation")
                        .WithMany("Cities")
                        .HasForeignKey("IdCountry")
                        .HasConstraintName("City_Country")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdCountryNavigation");
                });

            modelBuilder.Entity("SuitcaseApi.Models.Suitcase", b =>
                {
                    b.HasOne("SuitcaseApi.Models.City", "IdCityNavigation")
                        .WithMany("Suitcases")
                        .HasForeignKey("IdCity")
                        .HasConstraintName("Suitcase_City")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SuitcaseApi.Models.User", "IdUserNavigation")
                        .WithMany("Suitcases")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("Suitcase_User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdCityNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("SuitcaseApi.Models.SuitcaseItem", b =>
                {
                    b.HasOne("SuitcaseApi.Models.Item", "IdItemNavigation")
                        .WithMany("SuitcaseItems")
                        .HasForeignKey("IdItem")
                        .HasConstraintName("Item_SuitcaseItem")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SuitcaseApi.Models.Suitcase", "IdSuitcaseNavigation")
                        .WithMany("SuitcaseItems")
                        .HasForeignKey("IdSuitcase")
                        .HasConstraintName("Suitcase_SuitcaseItem")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdItemNavigation");

                    b.Navigation("IdSuitcaseNavigation");
                });

            modelBuilder.Entity("SuitcaseApi.Models.City", b =>
                {
                    b.Navigation("Suitcases");
                });

            modelBuilder.Entity("SuitcaseApi.Models.Country", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("SuitcaseApi.Models.Item", b =>
                {
                    b.Navigation("SuitcaseItems");
                });

            modelBuilder.Entity("SuitcaseApi.Models.Suitcase", b =>
                {
                    b.Navigation("SuitcaseItems");
                });

            modelBuilder.Entity("SuitcaseApi.Models.User", b =>
                {
                    b.Navigation("Suitcases");
                });
#pragma warning restore 612, 618
        }
    }
}
